{"meta":{"title":"<Tech>Brunch","subtitle":"TechBrunch","description":"TechBrunch - TheUseCaseFactory","author":"Anshul Gautam","url":"http://anshulgautam.in"},"pages":[{"title":"About TechBrunch","date":"2018-09-02T05:42:55.000Z","updated":"2019-01-22T06:09:07.739Z","comments":true,"path":"about/index.html","permalink":"http://anshulgautam.in/about/index.html","excerpt":"","text":"Welcome to TechBrunch!!! Hi! I am Anshul, the author of this blog. I love technology, and open source stuffs that have been changing our lives for better. TechBrunch is the culmination of knowledge shared on the internet, which has been put together here in form of solutions to the most common use cases which Developers face in every day to day life. I blog for TechBrunch at http://www.anshulgautam.in, and MyPoorSkills at http://blog.anshulgautam.in. Do follow my blogs, and encourage me with your suggestions and comments. =)"},{"title":"Labels","date":"2019-01-22T06:09:07.739Z","updated":"2019-01-22T06:09:07.739Z","comments":false,"path":"tags/index.html","permalink":"http://anshulgautam.in/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JWT Token Implementation with Dedicated Authentication-Authorization Server","slug":"JwtTokenImplementation","date":"2019-04-22T06:36:16.000Z","updated":"2019-04-22T08:31:36.088Z","comments":true,"path":"2019/04/22/JwtTokenImplementation/","link":"","permalink":"http://anshulgautam.in/2019/04/22/JwtTokenImplementation/","excerpt":"JWT stands for JSON Web Token. JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.JWT can have symmetric/asymmetric signatures for Signing. It is currently the latest standard for implementing Security in our web applications.Flow, how it works with JWT:- Each security tokens are protected data structures. it contains information about issuer, time of expiration of token, subject etc. These are identified under the claim section of JWT.- Each JWT Token is signed, so its tamper proof and bears authenticity throughout its valid time frame.- For accessing any resource, client requests for a token.- Issuer issues a token to the client.- Client makes use of that token when talking to resources. This token is generally placed in header of the request for consuming resource services.","text":"JWT stands for JSON Web Token. JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.JWT can have symmetric/asymmetric signatures for Signing. It is currently the latest standard for implementing Security in our web applications.Flow, how it works with JWT:- Each security tokens are protected data structures. it contains information about issuer, time of expiration of token, subject etc. These are identified under the claim section of JWT.- Each JWT Token is signed, so its tamper proof and bears authenticity throughout its valid time frame.- For accessing any resource, client requests for a token.- Issuer issues a token to the client.- Client makes use of that token when talking to resources. This token is generally placed in header of the request for consuming resource services.When client wants to talk to resource, using a valid token in its header section of the request, resource can behave in two ways to serve the requests of clients:1. By validating the token present in the request, which was provided to the client from the issuer or an Authentication Server. In this case, resource server has trust relationship with the issuer and it has also the information about encrypting standards used by the issuer. By making use of these information, resource validates the token and if the token if valid serves client with the sought services.2. By sending the token received from the request to the Authentication-Authorization server. In this scenario, Issuer/Token-Validator is on the same server. It has responsibility to issue valid tokens to clients’ valid requests. It also does the task of validating the token sent by resource server. About the validity of token, the Authentication-Authorization server responds to resource server accordingly. Based on the output from Authentication-Authorization server, resource server can then process/reject the client requests. We have developed an example application which implements JWT for Security, and goes by the second approach mentioned above. Each issues JWT token stays valid for 2 minutes and then expires. On using the same JWT token, resource server will reject the requests. Client needs to get the new token from Authentication-Authorization server. The token persists in a cookie at Client Side. In this approach all the logic of issuing the token and validating the token is present at only one place, that is at the Authentication-Authorization server end. If we have to scale up in a Dockerized environment, we can create as much instance of Authentication-Authorization server we want, and code wise everything related to authentication and authorization is present at only one place. The demo project has: UI made in angular An authentication-authorization server. A resource server that is serving to requests made via web service calls. Please find the link to GitHub repository below: https://github.com/anshulgammy/jwt-implementation-springboot","categories":[{"name":"Web","slug":"Web","permalink":"http://anshulgautam.in/categories/Web/"},{"name":"Web Service","slug":"Web/Web-Service","permalink":"http://anshulgautam.in/categories/Web/Web-Service/"},{"name":"Java","slug":"Web/Web-Service/Java","permalink":"http://anshulgautam.in/categories/Web/Web-Service/Java/"},{"name":"Security","slug":"Web/Web-Service/Java/Security","permalink":"http://anshulgautam.in/categories/Web/Web-Service/Java/Security/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"http://anshulgautam.in/tags/Spring-Boot/"},{"name":"Development","slug":"Development","permalink":"http://anshulgautam.in/tags/Development/"},{"name":"JWT","slug":"JWT","permalink":"http://anshulgautam.in/tags/JWT/"},{"name":"Secuirty","slug":"Secuirty","permalink":"http://anshulgautam.in/tags/Secuirty/"}]},{"title":"LDAP vs RDBMS","slug":"LdapVsRdbms","date":"2019-01-14T12:16:26.000Z","updated":"2019-01-22T06:09:07.692Z","comments":true,"path":"2019/01/14/LdapVsRdbms/","link":"","permalink":"http://anshulgautam.in/2019/01/14/LdapVsRdbms/","excerpt":"Before having a look at LDAP, we should know about ‘Directory’. What is directory structure?The directory structure is the organization of files into a hierarchy of folders. It should be stable and scalable; it should not fundamentally change, only be added to. Computers have used the folder metaphor for decades as a way to help users keep track of where something can be found.When information is stored in Directory Structure, it becomes very much feasible to manage hierarchical information, read/write to it. This directory structure can be scaled up to achieve three major functionalities on the web: Authentication, Authorization, and Personalization. LDAP stands for Lightweight Directory Access Protocol. LDAP is a standards based specification for interacting with directory data. Directory Services can implement support of LDAP to provide interoperability among third party applications.LDAP is an open, industrial standard application protocol for reading and editing distributed directories over the network. In these directories, we have set of records in an organized hierarchical structure, similar to how a corporate email directory or a telephone directory looks like. LDAP enables anyone to locate resources in a network, be it on a public internet or corporate intranet. LDAP read operations are extremely fast than any other possible alternatives. When we have looked at LDAP, lets get to know what an Active Directory is…Active Directory is Microsoft’s implementation of directory service that, among other protocols, supports LDAP to query it’s data.","text":"Before having a look at LDAP, we should know about ‘Directory’. What is directory structure?The directory structure is the organization of files into a hierarchy of folders. It should be stable and scalable; it should not fundamentally change, only be added to. Computers have used the folder metaphor for decades as a way to help users keep track of where something can be found.When information is stored in Directory Structure, it becomes very much feasible to manage hierarchical information, read/write to it. This directory structure can be scaled up to achieve three major functionalities on the web: Authentication, Authorization, and Personalization. LDAP stands for Lightweight Directory Access Protocol. LDAP is a standards based specification for interacting with directory data. Directory Services can implement support of LDAP to provide interoperability among third party applications.LDAP is an open, industrial standard application protocol for reading and editing distributed directories over the network. In these directories, we have set of records in an organized hierarchical structure, similar to how a corporate email directory or a telephone directory looks like. LDAP enables anyone to locate resources in a network, be it on a public internet or corporate intranet. LDAP read operations are extremely fast than any other possible alternatives. When we have looked at LDAP, lets get to know what an Active Directory is…Active Directory is Microsoft’s implementation of directory service that, among other protocols, supports LDAP to query it’s data.Characteristics of an LDAP-Compliant Directory: Extremely fast Read operations. Directories are tuned for higher read performance because the nature of the data in the directory is more commonly read than written or updated. Relatively static data. The data most commonly stored in the directory is not frequently subjected to change or modification. Distributed. The directory, and henceforth the data it stores, is distributed in nature. Hierarchical. The directory is capable of storing objects in a hierarchical fashion for organization and relationship. Object-oriented. The directory represents elements and objects. Objects are created from object classes, which represent a collection of attributes. Standard schema. Directories utilize a standard schema that is available to all applications making use of the directory. Multi-valued attributes. Directory attributes can be single or multi-valued. Multi-master replication. Most leading directories offer multi-master replication, allowing writes and updates to occur on multiple servers. Therefore, even if servers are unable to communicate for periods of time, operations can still occur locally and then be sent to other replicas once communication is restored. Characteristics of an RDBMS: Write-intensive operations. The RDBMS is frequently written to and is often used in transaction-oriented applications. Data in flux or historical data. The RDBMS is designed to handle frequently changing data. Alternatively, a RDBMS can also store vast amounts of historical data which can later be anaylzed or “mined.” Application-specific schema. The RDBMS is configured on a per-application basis and a unique schema exists to support each application. Complex data models. The relational nature of the RDBMS makes it suitable for handling sophisticated, complex data models that require many tables, foreign key values, complex join operations, and so on. Data integrity. The RDBMS features many components designed to ensure data integrity. This includes rollback operations, referential integrity, and transaction-oriented operations. ACID (Atomic, Consistent, Isolation, Durable) transactions. The transaction either commits (such that all actions are completed) or it aborts (all actions are reversed or not performed). When should we prefer LDAP? For arriving at the conclusion, we need to ask ourselves answer to these questions: Is the data dynamic or relatively static? Does the data need to be distributed? Can the data be used by more than one application? Is the data multi-valued? Can your data or application take advantage of a hierarchical relationship? Do you need flexible security options? Do you need single sign-on? Do you need distributed or delegated administration capabilities? If answer to some or all of these questions is yes, then directories and directory-based applications would likely be useful and the right choice for our application.","categories":[{"name":"LDAP","slug":"LDAP","permalink":"http://anshulgautam.in/categories/LDAP/"},{"name":"Development","slug":"LDAP/Development","permalink":"http://anshulgautam.in/categories/LDAP/Development/"},{"name":"RDBMS","slug":"LDAP/Development/RDBMS","permalink":"http://anshulgautam.in/categories/LDAP/Development/RDBMS/"},{"name":"Spring","slug":"LDAP/Development/RDBMS/Spring","permalink":"http://anshulgautam.in/categories/LDAP/Development/RDBMS/Spring/"}],"tags":[{"name":"Development","slug":"Development","permalink":"http://anshulgautam.in/tags/Development/"},{"name":"LDAP","slug":"LDAP","permalink":"http://anshulgautam.in/tags/LDAP/"},{"name":"RDBMS","slug":"RDBMS","permalink":"http://anshulgautam.in/tags/RDBMS/"},{"name":"Spring","slug":"Spring","permalink":"http://anshulgautam.in/tags/Spring/"}]},{"title":"Securing Rest Web Service with In-Memory model of BasicAuth","slug":"SecuringRestWebService","date":"2019-01-11T10:22:09.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2019/01/11/SecuringRestWebService/","link":"","permalink":"http://anshulgautam.in/2019/01/11/SecuringRestWebService/","excerpt":"This post deals with Securing a Spring Rest Web Service, using in-memory model of BasicAuth offered by Spring Security. The sample application built for this purpose has used Java 1.8 and Spring dependencies for version 5. An earlier post on this website, ‘Building REST Web Service with Spring 5‘, covered creating a Rest Web Service using Spring 5. In this post, I am going to build authentication on the same set of Rest Web Services. I prefer annotations/Java Configuration, so I have entirely used Java configuration in this implementation.Over the existing Rest Webservice, I used In-Memory credentials with Default Spring BasicAuth. I will be sharing what new changes I had to do in this implementation.","text":"This post deals with Securing a Spring Rest Web Service, using in-memory model of BasicAuth offered by Spring Security. The sample application built for this purpose has used Java 1.8 and Spring dependencies for version 5. An earlier post on this website, ‘Building REST Web Service with Spring 5‘, covered creating a Rest Web Service using Spring 5. In this post, I am going to build authentication on the same set of Rest Web Services. I prefer annotations/Java Configuration, so I have entirely used Java configuration in this implementation.Over the existing Rest Webservice, I used In-Memory credentials with Default Spring BasicAuth. I will be sharing what new changes I had to do in this implementation.The SpringSecurityConfig class which extends WebSecurityConfigurerAdapter. This class is the config class used to declare all the configurations related to Spring Security.This class uses inMemoryAuthentication, and defines legitimate users and their credentials with roles.I have put a check on http request under configure() method, to intercept it and do authentication upon it. Rest web services under this implementation are protected even if someone tries to hit GET requests through browsers. On hitting the resource URL through browser, a login form will be presented. While using REST clients, like SOAP-UI/PostMan, we need to provide authentication credentials under ‘Basic Auth’.1234567891011121314151617@Configuration@EnableWebSecuritypublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired protected void configureGlobal(final AuthenticationManagerBuilder auth) throws Exception &#123; auth.inMemoryAuthentication().withUser(CommonConstants.ADMIN_USER_NAME).password(CommonConstants.ADMIN_USER_PWD) .roles(CommonConstants.ADMIN_ROLE); auth.inMemoryAuthentication().withUser(CommonConstants.USER_USER_NAME).password(CommonConstants.USER_PWD) .roles(CommonConstants.USER_ROLE); &#125; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.csrf().disable().exceptionHandling().and().authorizeRequests().antMatchers(&quot;/**&quot;) .hasRole(CommonConstants.ADMIN_ROLE).and().httpBasic().and().formLogin(); &#125;&#125; The SpringSecurityInitializer class, which extends AbstractSecurityWebApplicationInitializer. The purpose of this class is to load springSecurityFilterChain automatically. Just an empty class will do, unless you want to override some methods for some additional custom configurations.123public class SpringSecurityInitializer extends AbstractSecurityWebApplicationInitializer &#123; &#125; The SpringBeanDefinitionsConfig class. This class is for configuring the beans for the Spring Application using Java Configuration only. I have defined my implementation of PasswordEncoder because Spring 5 onwards, having an implementation of PasswordEncoder is necessary. Though, my PasswordEncoder does nothing rather than comparing two plain Strings. :D1234567891011@Configuration@EnableWebMvc@ComponentScan(basePackages = &quot;com.techbrunch.boostrap.webapplication&quot;)public class SpringBeanDefinitionsConfig &#123; @Bean public PasswordEncoder passwordEncoder()&#123; return new MyPasswordEncoder(); &#125;&#125; You can find the complete code for this implementation of Authentication for Rest Web Service at my GitHub repo below:https://github.com/anshulgammy/inmemauthforrestwebservice","categories":[{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/categories/Java/"},{"name":"Development","slug":"Java/Development","permalink":"http://anshulgautam.in/categories/Java/Development/"},{"name":"REST","slug":"Java/Development/REST","permalink":"http://anshulgautam.in/categories/Java/Development/REST/"},{"name":"Web Service","slug":"Java/Development/REST/Web-Service","permalink":"http://anshulgautam.in/categories/Java/Development/REST/Web-Service/"},{"name":"Spring","slug":"Java/Development/REST/Web-Service/Spring","permalink":"http://anshulgautam.in/categories/Java/Development/REST/Web-Service/Spring/"}],"tags":[{"name":"Development","slug":"Development","permalink":"http://anshulgautam.in/tags/Development/"},{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/tags/Java/"},{"name":"REST","slug":"REST","permalink":"http://anshulgautam.in/tags/REST/"},{"name":"Web Service","slug":"Web-Service","permalink":"http://anshulgautam.in/tags/Web-Service/"},{"name":"Spring Security","slug":"Spring-Security","permalink":"http://anshulgautam.in/tags/Spring-Security/"}]},{"title":"Building REST Web Service with Spring 5","slug":"RestWebServiceWithSpring","date":"2019-01-09T06:58:09.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2019/01/09/RestWebServiceWithSpring/","link":"","permalink":"http://anshulgautam.in/2019/01/09/RestWebServiceWithSpring/","excerpt":"Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability, that enable services to work best on the Web.In the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs), typically links on the Web. The resources are acted upon by using a set of simple, well-defined operations. The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.In the REST architecture style, clients and servers exchange representations of resources by using a standardized interface and protocol.","text":"Representational State Transfer (REST) is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service induce desirable properties, such as performance, scalability, and modifiability, that enable services to work best on the Web.In the REST architectural style, data and functionality are considered resources and are accessed using Uniform Resource Identifiers (URIs), typically links on the Web. The resources are acted upon by using a set of simple, well-defined operations. The REST architectural style constrains an architecture to a client/server architecture and is designed to use a stateless communication protocol, typically HTTP.In the REST architecture style, clients and servers exchange representations of resources by using a standardized interface and protocol. Crucial features of REST architecture which makes it simple, lightweight, and fast: Resource identification through URI: A RESTful web service exposes a set of resources that identify the targets of the interaction with its clients. Resources are identified by URIs, which provide a global addressing space for resource and service discovery. Uniform interface: Resources are manipulated using a fixed set of four create, read, update, delete operations: PUT, GET, POST, and DELETE.PUT creates a new resource, which can be then deleted by using DELETE. It should be used to update a resource.GET retrieves the current state of a resource in some representation.POST transfers a new state onto a resource. Calling POST on the same resource with same request won’t be a nice idea. That is why, POST is preferred to create a new resource and PUT for updating the resource. Calling PUT more than once is safe.However, both PUT and POST can create new resources. In REST architectural style, resources are decoupled from their representation so that their content can be accessed in a variety of formats, such as HTML, XML, plain text, PDF, JPEG, JSON, and others. Metadata about the resource is available and used, for example, to control caching, detect transmission errors, negotiate the appropriate representation format, and perform authentication or access control. Stateful Interactions: Every interaction with a resource is stateless; that is, request messages are self-contained. Stateful interactions are based on the concept of explicit state transfer. Several techniques exist to exchange state, such as URI rewriting, cookies, and hidden form fields. What is JAX-RS?JAX-RS is a specification for implementing REST web services in Java, currently defined by the JSR-370. It is part of the Java EE technologies, currently defined by the JSR 366.The JAX-RS API uses Java programming language annotations to simplify the development of RESTful web services. We can decorate Java programming language class files with JAX-RS annotations to define resources and the actions that can be performed on those resources.JAX-RS annotations are runtime annotations; therefore, runtime reflection will generate the helper classes and artifacts for the resource. There are many implementations of JAX-RS available. Jersey (shipped with GlassFish and Payara) is the JAX-RS reference implementation, however there are other implementations such as RESTEasy (shipped with JBoss EAP and WildFly) and Apache CXF (shipped with TomEE and WebSphere). I have used Spring 5 to develop a sample REST web service, which covers all the HTTP operations, GET, PUT, POST, DELETE.The Spring Framework is not a JAX-RS implementation and can be seen as a Spring alternative to the JAX-RS stardard. It is a full framework that allows you to create Java enterprise applications. The REST capabilities are provided by the Spring MVC module. It is not a JAX-RS implementation and can be seen as a Spring alternative to the JAX-RS stardard. Why my preference was to go with Spring for building REST Web service? It provides “full” stack, not just REST facilities. It provides Dependency injection, AOP, Transactions and much more. My application will be better scalable in this way. It supports pluggable view templates such as JSP, freemarker, velocity etc. Find the code for the Rest web service developed with Spring 5 at my GitHub repo below:https://github.com/anshulgammy/restwswithspringImages in the post: Courtesy Google Images Search","categories":[{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/categories/Java/"},{"name":"Development","slug":"Java/Development","permalink":"http://anshulgautam.in/categories/Java/Development/"},{"name":"REST","slug":"Java/Development/REST","permalink":"http://anshulgautam.in/categories/Java/Development/REST/"},{"name":"Web Service","slug":"Java/Development/REST/Web-Service","permalink":"http://anshulgautam.in/categories/Java/Development/REST/Web-Service/"},{"name":"Spring","slug":"Java/Development/REST/Web-Service/Spring","permalink":"http://anshulgautam.in/categories/Java/Development/REST/Web-Service/Spring/"}],"tags":[{"name":"Development","slug":"Development","permalink":"http://anshulgautam.in/tags/Development/"},{"name":"Spring","slug":"Spring","permalink":"http://anshulgautam.in/tags/Spring/"},{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/tags/Java/"},{"name":"REST","slug":"REST","permalink":"http://anshulgautam.in/tags/REST/"},{"name":"Web Service","slug":"Web-Service","permalink":"http://anshulgautam.in/tags/Web-Service/"}]},{"title":"Integrating Node Related Modules With Maven","slug":"IntegratingNodeRelatedModulesWithMaven","date":"2019-01-07T10:44:17.000Z","updated":"2019-01-22T06:09:07.692Z","comments":true,"path":"2019/01/07/IntegratingNodeRelatedModulesWithMaven/","link":"","permalink":"http://anshulgautam.in/2019/01/07/IntegratingNodeRelatedModulesWithMaven/","excerpt":"Angular CLI gives so much flexibility when we are developing Angular applications. So much of boiler plate code gets auto generated if you are using CLI.What if we require Angular app to get integrated with existing Maven project?","text":"Angular CLI gives so much flexibility when we are developing Angular applications. So much of boiler plate code gets auto generated if you are using CLI.What if we require Angular app to get integrated with existing Maven project?Angular CLI and its command run in the Node environment. The Node environment is very much different from Maven environment.In Maven, each module describes itself in a pom.xml including its dependencies and the build plugins. Build plugins attach to the project’s lifecycle and execute required tasks and commands. A module may have multiple sub modules and, obviously, a sub module references its parent module. Dependencies are installed to a local Maven repository on the user’s machine. In Node environment, whether the package manager is npm, yarn or pnpm—dependencies are listed in a package.json. Running the package manager’s install command, e.g. yarn install, resolves dependencies, extracts tarballs from a registry and copies a flattened dependency tree to a local node_modules folder. The major difference that is quite evident is, a local node_modules folder is on a per-package basis. On the other side, a local Maven repository is on a per-user basis and stores resolvable dependencies. We have a Frontend Maven Plugin which enables to run Node and related package managers through Maven. The important thing here is that it makes sharing of one node_modules folder across several Maven modules. In order to make use of this plugin, we need to update our parent pom to have this frontend maven plugin. A sample pom.xml making use of this plugin would be like below. In the similar manner we can have executables for yarn, grunt etc.123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;plugin&gt; &lt;groupId&gt;com.github.eirslett&lt;/groupId&gt; &lt;artifactId&gt;frontend-maven-plugin&lt;/artifactId&gt; &lt;version&gt;@project.version@&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;install node and npm&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;install-node-and-npm&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;nodeVersion&gt;v5.3.0&lt;/nodeVersion&gt; &lt;npmVersion&gt;3.3.12&lt;/npmVersion&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;npm install&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;npm&lt;/goal&gt; &lt;/goals&gt; &lt;!-- Optional configuration which provides for running any npm command --&gt; &lt;configuration&gt; &lt;arguments&gt;install&lt;/arguments&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;npm run build&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;npm&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;arguments&gt;run build&lt;/arguments&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;grunt build&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;grunt&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;arguments&gt;--no-color&lt;/arguments&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; The plugin has been designed to use a local installation of node. But in my case, even though I had the node installed on my machine, on the first run of ‘install’ it did download executable node. On subsequent runs, as the executable node was already present in the dependencies, it used that one. But I am wondering why it had do download the executable on the first run of install, as my system already had Node installed and configured.Please let me know in case you know why the plugin behaved this way.","categories":[{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/categories/Java/"},{"name":"Development","slug":"Java/Development","permalink":"http://anshulgautam.in/categories/Java/Development/"},{"name":"Maven","slug":"Java/Development/Maven","permalink":"http://anshulgautam.in/categories/Java/Development/Maven/"}],"tags":[{"name":"Node","slug":"Node","permalink":"http://anshulgautam.in/tags/Node/"},{"name":"Maven Modules","slug":"Maven-Modules","permalink":"http://anshulgautam.in/tags/Maven-Modules/"},{"name":"Plugins","slug":"Plugins","permalink":"http://anshulgautam.in/tags/Plugins/"}]},{"title":"Git issues with GUI Clients on MacOs Sierra 10.13","slug":"GitProblemsWithMacOS","date":"2019-01-07T05:31:02.000Z","updated":"2019-01-22T06:09:07.692Z","comments":true,"path":"2019/01/07/GitProblemsWithMacOS/","link":"","permalink":"http://anshulgautam.in/2019/01/07/GitProblemsWithMacOS/","excerpt":"Lately, I changed my GitHub Username to ‘anshulgammy’. So as expected, urls of all of my repositories were affected. Most of the times, I make use of command line Git to push my changes. Nevertheless, I enjoy the ease that Git GUI clients have to offer. I am using macOS sierra 10.13, and it had SourceTree installed for quite sometime. When I tried to push my changes to Git repo using SourceTree, it kept asking me for password for my previous username on host.github.com. However, I was able to push the changes from my Terminal, without any issues. It took quite long for me to figure out how to resolve this issue.","text":"Lately, I changed my GitHub Username to ‘anshulgammy’. So as expected, urls of all of my repositories were affected. Most of the times, I make use of command line Git to push my changes. Nevertheless, I enjoy the ease that Git GUI clients have to offer. I am using macOS sierra 10.13, and it had SourceTree installed for quite sometime. When I tried to push my changes to Git repo using SourceTree, it kept asking me for password for my previous username on host.github.com. However, I was able to push the changes from my Terminal, without any issues. It took quite long for me to figure out how to resolve this issue. In case you are also struggling with the same issue, here goes the solution: Open KeyChain on your mac. Lock the KeyChain, and then unlock it. Go to SourceTree, and make change to your Git Repository using the current username that you have on GitHub. You can change the URL from ‘Repository -&gt; Repository Settings… -&gt; Remote -&gt; Edit. The catch here was, SourceTree remembers the last username that was used to successfully log in to a given host and tries that one by default to look up the keychain entry. This can, however, be unreliable if you don’t use the same username all the time on a given host. To make it unambiguous, include the username in the URL, like this: http://username@host/path/to/repo This resolved the issue with SourceTree, and now I am successfully pushing my changes using SourceTree. While I was struggling with SourceTree, I thought of trying a different GUI client - GitHub Desktop. Once installed, when I started it, it welcomed me with an error stating it cannot figure out my creds from KeyChain. The fix for this was simple: Open KeyChain on your mac. Lock the KeyChain, and then unlock it. Just doing this, fixed the issue with GitHub Desktop.","categories":[{"name":"Git","slug":"Git","permalink":"http://anshulgautam.in/categories/Git/"},{"name":"Development","slug":"Git/Development","permalink":"http://anshulgautam.in/categories/Git/Development/"},{"name":"Version Controlling","slug":"Git/Development/Version-Controlling","permalink":"http://anshulgautam.in/categories/Git/Development/Version-Controlling/"},{"name":"macOS Sierra","slug":"Git/Development/Version-Controlling/macOS-Sierra","permalink":"http://anshulgautam.in/categories/Git/Development/Version-Controlling/macOS-Sierra/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://anshulgautam.in/tags/Git/"},{"name":"SourceTree","slug":"SourceTree","permalink":"http://anshulgautam.in/tags/SourceTree/"},{"name":"GitHub Desktop","slug":"GitHub-Desktop","permalink":"http://anshulgautam.in/tags/GitHub-Desktop/"}]},{"title":"PlayingWithSVG - Controlling various sections of Image using SVG format and JavaScript","slug":"PlayingWithSVG","date":"2019-01-03T11:14:53.000Z","updated":"2019-01-22T06:09:07.708Z","comments":true,"path":"2019/01/03/PlayingWithSVG/","link":"","permalink":"http://anshulgautam.in/2019/01/03/PlayingWithSVG/","excerpt":"What is SVG? SVG stands for Scalable Vector Graphics. It is an XML-based vector image format for two-dimensional graphics with support for interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium since 1999. SVG images and their behaviors are defined in XML text files. Advantages of using SVG over other image formats (like JPEG and GIF) are: SVG images can be created and edited with any text editor SVG images can be searched, indexed, scripted, and compressed SVG images are scalable SVG images can be printed with high quality at any resolution SVG images are zoomable SVG graphics do NOT lose any quality if they are zoomed or resized SVG is an open standard SVG files are pure XML","text":"What is SVG? SVG stands for Scalable Vector Graphics. It is an XML-based vector image format for two-dimensional graphics with support for interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium since 1999. SVG images and their behaviors are defined in XML text files. Advantages of using SVG over other image formats (like JPEG and GIF) are: SVG images can be created and edited with any text editor SVG images can be searched, indexed, scripted, and compressed SVG images are scalable SVG images can be printed with high quality at any resolution SVG images are zoomable SVG graphics do NOT lose any quality if they are zoomed or resized SVG is an open standard SVG files are pure XML We can control various sections of SVG image, defined by attributes for svg tag, namely paths and its definitions. I tried a mini project to identify from map of India which states are they on which user clicks on. I used a SVG image for map of India, and controlled various sections of svg image using the separate path that it contained. Find the link to this project here at my GitHub repo:https://github.com/anshulgammy/PlayingWithSVG","categories":[],"tags":[{"name":"SVG","slug":"SVG","permalink":"http://anshulgautam.in/tags/SVG/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://anshulgautam.in/tags/JavaScript/"},{"name":"Developer","slug":"Developer","permalink":"http://anshulgautam.in/tags/Developer/"}]},{"title":"Run/Distribute Java Webapps via a Single Jar File","slug":"Jar-Executable-Web-Application","date":"2018-12-27T09:29:12.000Z","updated":"2019-01-22T06:09:07.692Z","comments":true,"path":"2018/12/27/Jar-Executable-Web-Application/","link":"","permalink":"http://anshulgautam.in/2018/12/27/Jar-Executable-Web-Application/","excerpt":"Tomcat is a very light weight Servlet container. In contrast to a typical development scenario in which we deploy your Java web applications on a standalone Tomcat instance, we can also integrate the server runtime directly within our applications, resulting in some interesting, convenient ways of using Tomcat.","text":"Tomcat is a very light weight Servlet container. In contrast to a typical development scenario in which we deploy your Java web applications on a standalone Tomcat instance, we can also integrate the server runtime directly within our applications, resulting in some interesting, convenient ways of using Tomcat.In the sample application that I built, I made use of Apache Tomcat Maven Plugin. The Tomcat Maven Plugin provides goals to manipulate WAR projects within the Apache Tomcat servlet container. On the other hand, it also allows us to run war project with an embedded Apache Tomcat. The run goals gives us the opportunity to quickly develop applications without needing to install a standalone Tomcat instance. Moreover, this feature adds to the beauty wherein a web application can be easily distributed and can be run through a jar file only, no server setup and deployment needed. I have used the version 2.0 of tomcat7-maven-plugin, but I would highly recommend to go for Version 2.3-SNAPSHOT of this plugin. Let me beware you, the version 2.2 has some serious bugs which will make your time and effort go waste, or lets say it will make your effort more than what’s really needed.123&lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;&lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;&lt;version&gt;2.0&lt;/version&gt; I also created a batch file, which I used to trigger the jar file. The batch file code is as follows, which basically aims to start the jar file and launch the internet explorer with the web app url.123456@echo offecho Refresh the page once configuration is up...echo Application is accessible at http://localhost:8080start iexplore http://localhost:8080java -jar \"jceutil_standalone.jar\"cmd.exe /K Find the code of my entire project at my github repo:https://github.com/anshulgammy/Jar_Executable_Java_WebApp","categories":[{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/categories/Java/"},{"name":"Development","slug":"Java/Development","permalink":"http://anshulgautam.in/categories/Java/Development/"},{"name":"Maven","slug":"Java/Development/Maven","permalink":"http://anshulgautam.in/categories/Java/Development/Maven/"},{"name":"Embedded Server","slug":"Java/Development/Maven/Embedded-Server","permalink":"http://anshulgautam.in/categories/Java/Development/Maven/Embedded-Server/"},{"name":"Tomcat","slug":"Java/Development/Maven/Embedded-Server/Tomcat","permalink":"http://anshulgautam.in/categories/Java/Development/Maven/Embedded-Server/Tomcat/"}],"tags":[]},{"title":"Read-Write to Excel - Java Maven Project","slug":"Project","date":"2018-12-20T11:49:28.000Z","updated":"2019-01-22T06:09:07.708Z","comments":true,"path":"2018/12/20/Project/","link":"","permalink":"http://anshulgautam.in/2018/12/20/Project/","excerpt":"Having read-write operation on Excel sheets is quite a frequent requirement. And it is true across different technologies.I have implemented this functionality in Java, using a maven project.I have used Apache POI as the dependency which actually does the work of read-write to excel files.","text":"Having read-write operation on Excel sheets is quite a frequent requirement. And it is true across different technologies.I have implemented this functionality in Java, using a maven project.I have used Apache POI as the dependency which actually does the work of read-write to excel files.In the project, there is a .json file. This file has all the information which needs to be written to the excel sheet. So data is collected as JsonArray, and then with Apache POI data is written to excel. For reading the data in excel sheet, I have read the data as plain string, and tested it out by printing them in the console. Have a look on the code changes at my git repo below:https://github.com/anshulgammy/exceloperations","categories":[{"name":"Java","slug":"Java","permalink":"http://anshulgautam.in/categories/Java/"},{"name":"Development","slug":"Java/Development","permalink":"http://anshulgautam.in/categories/Java/Development/"},{"name":"Maven","slug":"Java/Development/Maven","permalink":"http://anshulgautam.in/categories/Java/Development/Maven/"},{"name":"Read-Write Excel","slug":"Java/Development/Maven/Read-Write-Excel","permalink":"http://anshulgautam.in/categories/Java/Development/Maven/Read-Write-Excel/"}],"tags":[]},{"title":"Angular Chat Application using Socket.IO","slug":"angularchatapplication","date":"2018-09-25T10:00:14.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2018/09/25/angularchatapplication/","link":"","permalink":"http://anshulgautam.in/2018/09/25/angularchatapplication/","excerpt":"Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server. It consists of: a Node.js server: Source. Socket.IO is NOT a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server either.","text":"Socket.IO is a library that enables real-time, bidirectional and event-based communication between the browser and the server. It consists of: a Node.js server: Source. Socket.IO is NOT a WebSocket implementation. Although Socket.IO indeed uses WebSocket as a transport when possible, it adds some metadata to each packet: the packet type, the namespace and the ack id when a message acknowledgement is needed. That is why a WebSocket client will not be able to successfully connect to a Socket.IO server, and a Socket.IO client will not be able to connect to a WebSocket server either. I wrote a backend node server, where I used Socket.io library to listen and emit messages. The main idea was to separate the emitted messages/received messages logic in such a way that client-server architecture is easily representable. Moreover, though I could have implemented logging also at server side, but as of now I have kept it as the future scope for this project. =D Find the code for Chat server here:https://github.com/anshulgammy/chatserver I used Angular 5 to make the front end, and to communicate with Node Chat Server using Socket.IO. This simple example gives ability to test and implement the feature like ‘Observables’/‘Subscribe’ in Angular. Find the code for Chat client here:https://github.com/anshulgammy/chatclient","categories":[{"name":"Coder","slug":"Coder","permalink":"http://anshulgautam.in/categories/Coder/"},{"name":"Development","slug":"Coder/Development","permalink":"http://anshulgautam.in/categories/Coder/Development/"}],"tags":[{"name":"Node","slug":"Node","permalink":"http://anshulgautam.in/tags/Node/"},{"name":"Angular 5","slug":"Angular-5","permalink":"http://anshulgautam.in/tags/Angular-5/"},{"name":"Socket IO","slug":"Socket-IO","permalink":"http://anshulgautam.in/tags/Socket-IO/"}]},{"title":"Yaml!","slug":"yaml","date":"2018-09-19T09:03:33.000Z","updated":"2019-01-22T06:09:07.739Z","comments":true,"path":"2018/09/19/yaml/","link":"","permalink":"http://anshulgautam.in/2018/09/19/yaml/","excerpt":"Putting in configurations and using them through YAML has become so easy, a piece of cake. Whoever that comes from XML background, they would for sure appreciate the ease and flexibility offered by YAML. The official documentation on YAML says, “YAML Ain’t Markup Language” (abbreviated YAML) is a data serialization language designed to be human-friendly and work well with modern programming languages for common everyday tasks. This specification is both an introduction to the YAML language and the concepts supporting it, and also a complete specification of the information needed to develop applications for processing YAML.","text":"Putting in configurations and using them through YAML has become so easy, a piece of cake. Whoever that comes from XML background, they would for sure appreciate the ease and flexibility offered by YAML. The official documentation on YAML says, “YAML Ain’t Markup Language” (abbreviated YAML) is a data serialization language designed to be human-friendly and work well with modern programming languages for common everyday tasks. This specification is both an introduction to the YAML language and the concepts supporting it, and also a complete specification of the information needed to develop applications for processing YAML. YAML is primarily a data serialization language. XML was designed to be backwards compatible with the Standard Generalized Markup Language (SGML), which was designed to support structured documentation. XML therefore had many design constraints placed on it that YAML does not share. XML is a pioneer in many domains, YAML is the result of lessons learned from XML and other technologies.Unlike XML, we don’t have opening/closing tags. We don’t need to take care of parsing the xml, unmarshalling it, in order to get the data. With YAML, we have nested properties, in a text file, that can be used the way we would do for accessing properties from an object. A very simple example of YAML file I used for docker is below: 12345678910111213141516171819202122232425version: '1'services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress wordpress: depends_on: - db image: wordpress:latest ports: - \"8000:80\" restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress","categories":[{"name":"Blogger","slug":"Blogger","permalink":"http://anshulgautam.in/categories/Blogger/"},{"name":"Development","slug":"Blogger/Development","permalink":"http://anshulgautam.in/categories/Blogger/Development/"},{"name":"YAML","slug":"Blogger/Development/YAML","permalink":"http://anshulgautam.in/categories/Blogger/Development/YAML/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://anshulgautam.in/tags/Blog/"},{"name":"YAML","slug":"YAML","permalink":"http://anshulgautam.in/tags/YAML/"},{"name":"XML","slug":"XML","permalink":"http://anshulgautam.in/tags/XML/"}]},{"title":"The Serverless Framework","slug":"serverlessframework","date":"2018-09-18T04:40:55.000Z","updated":"2019-01-22T06:09:07.739Z","comments":true,"path":"2018/09/18/serverlessframework/","link":"","permalink":"http://anshulgautam.in/2018/09/18/serverlessframework/","excerpt":"Today we have Cloud based services, which has taken over completely the legacy server hosting paradigm. Today we believe in focussing on code, and factors of scalability and server management are being taken care of very effectively by cloud providers.Keeping a dedicated server is completely under your IT team observation so you need competence to manage the server yourself. You may need to spend for the technical or professional assistance to help manage the server.","text":"Today we have Cloud based services, which has taken over completely the legacy server hosting paradigm. Today we believe in focussing on code, and factors of scalability and server management are being taken care of very effectively by cloud providers.Keeping a dedicated server is completely under your IT team observation so you need competence to manage the server yourself. You may need to spend for the technical or professional assistance to help manage the server. One of the most popular framework around us, sort of a buzz word among developer’s community, is The Serverless Framework.To be precise, just like wireless internet has wires somewhere, serverless architectures still have servers somewhere. But calling it serverless means that as a developer you don’t have to think about those servers. You just focus on code. The Serverless Framework is a free and open-source web framework written using Node.js. Serverless is the first framework that was originally developed for building applications exclusively on AWS Lambda, a serverless computing platform provided by Amazon as a part of the Amazon Web Services. Currently, applications developed with Serverless can be deployed to other function as a service providers, including Microsoft Azure with Azure Functions, IBM Bluemix with IBM Cloud Functions based on Apache OpenWhisk, Google Cloud using Google Cloud Functions, Oracle Cloud using Oracle Fn[1], Kubeless based on Kubernetes, Spotinst and Webtask by Auth0.A Serverless app can simply be a couple of lambda functions to accomplish some tasks, or an entire back-end composed of hundreds of lambda functions. Serverless currently supports Node.js and Python runtimes, but very soon in future will also support Java for AWS Lambda. Serverless Applications are the next step in cloud-native development, and they require automation. If you’re tying together multiple managed services and functions, you cannot rely on a checklist of manual steps. You should be able to recreate your entire application with a command, using Serverless Framework CLI. The Serverless Framework CLI is used to build and deploy your application to any and every cloud provider. Have a look the Serverless’ blog, and you will also be enthralled to see where applications development and deployment practices are heading to.","categories":[{"name":"Blogger","slug":"Blogger","permalink":"http://anshulgautam.in/categories/Blogger/"},{"name":"Development","slug":"Blogger/Development","permalink":"http://anshulgautam.in/categories/Blogger/Development/"},{"name":"Serverless Framework","slug":"Blogger/Development/Serverless-Framework","permalink":"http://anshulgautam.in/categories/Blogger/Development/Serverless-Framework/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://anshulgautam.in/tags/Blog/"},{"name":"Serverless Framework","slug":"Serverless-Framework","permalink":"http://anshulgautam.in/tags/Serverless-Framework/"},{"name":"Cloud","slug":"Cloud","permalink":"http://anshulgautam.in/tags/Cloud/"}]},{"title":"The Love Calculator App for Fun!!!","slug":"LoveCalculatorApp","date":"2018-09-17T05:21:20.000Z","updated":"2019-01-22T06:09:07.708Z","comments":true,"path":"2018/09/17/LoveCalculatorApp/","link":"","permalink":"http://anshulgautam.in/2018/09/17/LoveCalculatorApp/","excerpt":"Just for fun, I made a Love Calculator app in Angular. The client has components to calculate the love compatibility based on a simple algorithm. It’s is no way an authenticate way to measure the love compatibility, but yes for sure it was fun to make it and my friends enjoyed using it.","text":"Just for fun, I made a Love Calculator app in Angular. The client has components to calculate the love compatibility based on a simple algorithm. It’s is no way an authenticate way to measure the love compatibility, but yes for sure it was fun to make it and my friends enjoyed using it. You can find the link to code Love Calculator client here:https://github.com/anshulgammy/lovecalculator.git At the back end, though there was no such need to have a separate server as Angular’s Webpack does fairly good to run this app, but I created one additional server in Node with a motive to capture all the details that the user would be trying out on this app. I thought it would be fun to sneak into what name’s are being tried upon on this Love Calculator. =D So the back end node server creates a serverlog file, which stores information related to Name of first person, Name of Second person, their compatibility result and IP of the client machine from where the app is used. You can find the link to code for this Node server here:https://github.com/anshulgammy/lovecalculatorserver.git","categories":[{"name":"Angular","slug":"Angular","permalink":"http://anshulgautam.in/categories/Angular/"},{"name":"Development","slug":"Angular/Development","permalink":"http://anshulgautam.in/categories/Angular/Development/"},{"name":"Node","slug":"Angular/Development/Node","permalink":"http://anshulgautam.in/categories/Angular/Development/Node/"}],"tags":[{"name":"Love Calculator","slug":"Love-Calculator","permalink":"http://anshulgautam.in/tags/Love-Calculator/"},{"name":"Blog","slug":"Blog","permalink":"http://anshulgautam.in/tags/Blog/"},{"name":"App","slug":"App","permalink":"http://anshulgautam.in/tags/App/"},{"name":"Fun at Workplace","slug":"Fun-at-Workplace","permalink":"http://anshulgautam.in/tags/Fun-at-Workplace/"}]},{"title":"Express Api for Node | Quick Reference","slug":"expressapifornode","date":"2018-09-16T14:08:46.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2018/09/16/expressapifornode/","link":"","permalink":"http://anshulgautam.in/2018/09/16/expressapifornode/","excerpt":"Express is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates the rapid development of Node based Web applications. It has been written on top of Node’s HTTP module. It makes writing REST(representational state transfer) API easy and with minimum lines of codes.","text":"Express is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates the rapid development of Node based Web applications. It has been written on top of Node’s HTTP module. It makes writing REST(representational state transfer) API easy and with minimum lines of codes. Following are some of the core features of Express framework − Allows to set up middlewares to respond to HTTP Requests. Defines a routing table which is used to perform different actions based on HTTP Method and URL. Allows to dynamically render HTML Pages based on passing arguments to templates. From the perspective of concepts related to REST, we have GET, POST, PUT and DELETE type of requests over HTTP protocol. GET - This is used to provide a read only access to a resource. PUT - This is used to create a new resource. DELETE - This is used to remove a resource. POST - This is used to update a existing resource or create a new resource. To get started we just need to install express framework in our application. 1npm install --save express // --save flag is to save the entry in our package.json. An example, which justifies everything that why its used. It’s simple and self explanatory. 12345678910111213141516171819202122232425262728293031323334var express = require('express');var app = express();app.use(express.static('public'));app.get('/index.htm', (req, res) =&gt; &#123; res.sendFile( __dirname + \"/\" + \"index.html\" );&#125;)app.get('/process_get', (req, res) =&gt; &#123; // Prepare output in JSON format response = &#123; first_name:req.query.first_name, last_name:req.query.last_name &#125;; console.log(response); res.end(JSON.stringify(response));&#125;);app.post('/process_post', (req, res) =&gt; &#123; // Prepare output in JSON format response = &#123; first_name:req.body.first_name, last_name:req.body.last_name &#125;; console.log(response); res.end(JSON.stringify(response));&#125;);var server = app.listen(8081, () =&gt; &#123; var host = server.address().address var port = server.address().port console.log(\"Example app listening at http://%s:%s\", host, port)&#125;); In the similar fashion, we can have PUT and DELETE requests also written using Express framwework. On a differnt Note: We often use Nodemon in Node, to allow our server to reflect changes as soon as it is done. Along with Nodemon, we often use JOI for validation. Joi is maintained by Hapi.js project. Even though hapi.js is a web framework by itself, Joi is independent and can be used in any type of node project. This is great for people using express or restify.What makes it even more interesting is that, besides user validation, it can be used to define database schemas as well","categories":[{"name":"Blogger","slug":"Blogger","permalink":"http://anshulgautam.in/categories/Blogger/"},{"name":"Development","slug":"Blogger/Development","permalink":"http://anshulgautam.in/categories/Blogger/Development/"},{"name":"Node","slug":"Blogger/Development/Node","permalink":"http://anshulgautam.in/categories/Blogger/Development/Node/"},{"name":"Express","slug":"Blogger/Development/Node/Express","permalink":"http://anshulgautam.in/categories/Blogger/Development/Node/Express/"}],"tags":[{"name":"Node","slug":"Node","permalink":"http://anshulgautam.in/tags/Node/"},{"name":"Express API","slug":"Express-API","permalink":"http://anshulgautam.in/tags/Express-API/"}]},{"title":"Node.js Quick Reference Guide","slug":"nodereferencedocument","date":"2018-09-15T06:24:12.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2018/09/15/nodereferencedocument/","link":"","permalink":"http://anshulgautam.in/2018/09/15/nodereferencedocument/","excerpt":"Node.js is not a programming language. It’s not even a framework. It’s a runtime environment, written in C++,which uses Google Chrome’s V8 engine. It was devised to run JavaScript outside of Web Browsers on backend servers.Web browsers have JavaScript engines, which allow execution of JavaScript codes inside them.Internet Explorer has Chakra, Mozilla has SpiderMonkey and Google Chrome has V8 engine for JavaScript execution in these browsers. Node.js uses single thread. That single thread serves different i/o requests. While processing for one i/o request is going on, our single thread can go and serve other i/o request.Node server can be used for Data/I/O related purposes. But not in scenarios where we need to have bigger computational power of CPU.By default, Node is asynchronous. But it can works both ways - synchronous as well as asynchronous.","text":"Node.js is not a programming language. It’s not even a framework. It’s a runtime environment, written in C++,which uses Google Chrome’s V8 engine. It was devised to run JavaScript outside of Web Browsers on backend servers.Web browsers have JavaScript engines, which allow execution of JavaScript codes inside them.Internet Explorer has Chakra, Mozilla has SpiderMonkey and Google Chrome has V8 engine for JavaScript execution in these browsers. Node.js uses single thread. That single thread serves different i/o requests. While processing for one i/o request is going on, our single thread can go and serve other i/o request.Node server can be used for Data/I/O related purposes. But not in scenarios where we need to have bigger computational power of CPU.By default, Node is asynchronous. But it can works both ways - synchronous as well as asynchronous. When executing inside web browsers, JavaScript has ‘window’ as the global variable defined.This window variable can be used to refer to other components defines within the JavaScript code.While executing JavaScript inside Node, we have ‘global’ as the global variable, which can be used to refer tocomponents defined within the JavaScript code. As always, dropping the global/window variable is a shorthand and that’s which is widely used by developers. Exporting and Loading of modules in Node.We use module.exports for exposing the components to be used by other js files in Node.We use require(), in order to import the exported modules.In modules, we can exports a single function or an object.‘module’ is one such variable which cannot be accessed by ‘global’ variable inside node. Node has some inbuilt modules like fs(FileStream), http etc. which serves our purpose to a great extent and allows us to use them, without having to worry about writing the logic on our own. Module Wrapper Function: Node doesn’t execute our code directly. Each file with snippets of code directly. It wraps everything inside of a function, which has parameters-exports, require, module, filename, dirname.Inside this function, our code executes. This function is called Module Wrapper Function. So by looking at the arguments, we can say that ‘require’ seems to be global, but its not. It is local to a Module Wrapper Function.filename is the variable which refers to the current filename’s fully qualified path. dirname is the fully qualified path to the current file’s directory. Some frequently used inbuilt Node modules are : path(for path related activities), os(for operating system related utility methods), fs(for FileStream related activities), events( to signal that something has happened in our application), http(for http related activities). Events module, and the EventEmitter class has a very high importance because of the potential that these give to developers: 12345cont EventEmitter = require('events');// EventEmitter is a class.// we need to create instance of this class in order to use its methods.const emitter = new EventEmitter();emitter.emit(\"message\", &#123;id:1, url:'http://anshulgautam.in'&#125;); // signalling that an event has happened. .addListener and on (they both serve the same purpose). 12345// Registering the Listener.emitter.on(\"message\", function(arg) &#123; console.log(\"Listener called\"); console.log(arg.url);&#125;); Listeners go synchronously to find which signal has been received first. From ECMA Script 6 onwards, function() {} is synonymous to () =&gt; {}. In case we can to extend EventEmitter class:12345678class Logger extends EventEmitter &#123; log(arg) &#123; console.log(arg); this.emit(\"message\", &#123;id:1, url:'http://anshulgautam.in'&#125;); &#125;&#125;module.exports = Logger; For using this exported class:123const Logger = require('./logger');const log = new Logger();log.log(\"hi\"); Another frequently used node module is HTTP. 123456789101112131415const http = require('http');const server = http.createServer(); // this server has all the capabilities of EventEmitter.server.on('connection', (socket) =&gt; &#123; console.log('New Connection established.');&#125;);server.listen(3000);console.log('Listening on port 3000...');Another, and a simple way to create the server:const server = http.createServer((req, res) =&gt; &#123; if(req.url === '/') &#123; res.write('Hello World!'); res.end(); &#125;&#125;); Nowadays, to handle various routes, we use a framework called Express, which handles such routes easily and in a cleaner way. Express is built on top of HTTP module in Node.That will be part of another post on this site. =)","categories":[{"name":"Coder","slug":"Coder","permalink":"http://anshulgautam.in/categories/Coder/"},{"name":"Blogger","slug":"Coder/Blogger","permalink":"http://anshulgautam.in/categories/Coder/Blogger/"},{"name":"Node.js","slug":"Coder/Blogger/Node-js","permalink":"http://anshulgautam.in/categories/Coder/Blogger/Node-js/"},{"name":"JavaScript","slug":"Coder/Blogger/Node-js/JavaScript","permalink":"http://anshulgautam.in/categories/Coder/Blogger/Node-js/JavaScript/"},{"name":"Development","slug":"Coder/Blogger/Node-js/JavaScript/Development","permalink":"http://anshulgautam.in/categories/Coder/Blogger/Node-js/JavaScript/Development/"}],"tags":[{"name":"Development","slug":"Development","permalink":"http://anshulgautam.in/tags/Development/"},{"name":"Node.js","slug":"Node-js","permalink":"http://anshulgautam.in/tags/Node-js/"},{"name":"Reference Guide","slug":"Reference-Guide","permalink":"http://anshulgautam.in/tags/Reference-Guide/"}]},{"title":"What’s Markdown?","slug":"markdown","date":"2018-09-03T09:20:32.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2018/09/03/markdown/","link":"","permalink":"http://anshulgautam.in/2018/09/03/markdown/","excerpt":"Markdown is a lightweight markup language that we can use to add formatting elements to plain text documents. Unlike WYSIWYG, we don’t get to see formatting changes immediately. When we create a Markdown-formatted file (which has extension .md or .markdown), we add Markdown syntax to our text to indicate which words and phrases should look different.","text":"Markdown is a lightweight markup language that we can use to add formatting elements to plain text documents. Unlike WYSIWYG, we don’t get to see formatting changes immediately. When we create a Markdown-formatted file (which has extension .md or .markdown), we add Markdown syntax to our text to indicate which words and phrases should look different.Markdown basically targets to generate HTML files or a print-ready document, without having to worry about how text should be formatted/marked-up using HTML. Markdown files need to have a Markdown application capable of processing the Markdown file. This application takes in our .md file and generates the print ready file. There are online applications also, like Dillinger (https://dillinger.io/) which perform our task on the fly. These applications use something called a Markdown processor/parser to take the Markdown-formatted text and output it into HTML format. The flow can be better depicted as follows: There are different CMS like Ghost, and even WordPress(by using Jetpack plugin) and static website generators like Hexo and Jekyll are using Markdown in their implementation.","categories":[{"name":"Coder","slug":"Coder","permalink":"http://anshulgautam.in/categories/Coder/"},{"name":"Blogger","slug":"Coder/Blogger","permalink":"http://anshulgautam.in/categories/Coder/Blogger/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://anshulgautam.in/tags/Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://anshulgautam.in/tags/Hexo/"},{"name":"Ghost Jekyll","slug":"Ghost-Jekyll","permalink":"http://anshulgautam.in/tags/Ghost-Jekyll/"}]},{"title":"Blogging Platforms","slug":"Platforms","date":"2018-08-30T10:06:02.000Z","updated":"2019-01-22T06:09:07.708Z","comments":true,"path":"2018/08/30/Platforms/","link":"","permalink":"http://anshulgautam.in/2018/08/30/Platforms/","excerpt":"There is plethora of blogging platforms available right now. This number is likely to increase further as well. The reason being the advancement in technology which has pushed flexibility, scalability and ease to another level.","text":"There is plethora of blogging platforms available right now. This number is likely to increase further as well. The reason being the advancement in technology which has pushed flexibility, scalability and ease to another level.When I started to blog way back in 2010, internet was majorly dominated by Wordpress and Blogger. The free version of Wordpress(wordpress.com) had very limited options for customization. Blogger on the another hand allowed a lot of customization. Me being Computer Science student had chosen blogger to be my blogging platform. I enjoyed coding (I still do… ;)) and hence I used to write code snippets to achieve the feature that I wanted to have on my site. Free version of Wordpress still does not allow such customization, but the options has considerably improved compared to what used to be offered at the time I began. Just imagine, no ‘script’ tags at all in your page….The Wordpress.org allowed users to install the CMS in their server and that had php as the baseline language which one could fiddle with to achieve the functionality of their choice. Even today, Wordpress is one of the most popular Open Source CMS available today. But in the present era, there has emerged new and open source platforms like Ghost, Medium, Jekyll and Hexo.They are all good, and have features that make them distinguished and important in their own way. But the one problem that lies with each one of them is the hosting cost. You need to have a dedicated server where you will deploy your website and it should be up and running all the time to serve your readers. There are many options for hosting today, but none of the are free. I don’t call free trials, demo, and options like limited dyno hours by hosting providers as completely free. What I want is a really free and efficient stuff for my website, because I don’t have any earnings out of my blogs. GitHub pages has helped me a lot. One can host their blogs using GitHub pages. GitHub pages provide hosting of your static web pages. So we need to have tools to convert our website into static pages that can be deployed into GitHub pages, and of course completely free of cost. Hexo and Jekyll are one of such tools. This blog has been build using Hexo and GitHub pages. And I am having great time blogging here. =)","categories":[{"name":"Coder","slug":"Coder","permalink":"http://anshulgautam.in/categories/Coder/"},{"name":"Blogger","slug":"Coder/Blogger","permalink":"http://anshulgautam.in/categories/Coder/Blogger/"}],"tags":[{"name":"Developer","slug":"Developer","permalink":"http://anshulgautam.in/tags/Developer/"},{"name":"Hexo","slug":"Hexo","permalink":"http://anshulgautam.in/tags/Hexo/"},{"name":"Ghost Jekyll","slug":"Ghost-Jekyll","permalink":"http://anshulgautam.in/tags/Ghost-Jekyll/"},{"name":"Blogging Platforms","slug":"Blogging-Platforms","permalink":"http://anshulgautam.in/tags/Blogging-Platforms/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"http://anshulgautam.in/tags/GitHub-Pages/"}]},{"title":"Hello World!","slug":"hello-world","date":"2018-08-28T10:06:02.000Z","updated":"2019-01-22T06:09:07.723Z","comments":true,"path":"2018/08/28/hello-world/","link":"","permalink":"http://anshulgautam.in/2018/08/28/hello-world/","excerpt":"Welcome to my very first post. This blog has been developed using Hexo!Hexo is an amazing tool, which I am amazed to see how easily converts my website codebase into static files. Deploying static files was never this easy, and cheap (call it completely free!) with GitHub pages.","text":"Welcome to my very first post. This blog has been developed using Hexo!Hexo is an amazing tool, which I am amazed to see how easily converts my website codebase into static files. Deploying static files was never this easy, and cheap (call it completely free!) with GitHub pages.I will be back with tutorial on how to power-up your blogs using Hexo and GitHub pages in later tutorials. =) 1$ hello world!!!","categories":[{"name":"Blogger","slug":"Blogger","permalink":"http://anshulgautam.in/categories/Blogger/"},{"name":"Codder","slug":"Blogger/Codder","permalink":"http://anshulgautam.in/categories/Blogger/Codder/"}],"tags":[{"name":"Blog","slug":"Blog","permalink":"http://anshulgautam.in/tags/Blog/"},{"name":"Hello World","slug":"Hello-World","permalink":"http://anshulgautam.in/tags/Hello-World/"}]}]}